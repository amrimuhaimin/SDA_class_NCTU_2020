# -*- coding: utf-8 -*-
"""Polar_coordinate_exponential.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10vv4zHjyt6VW4iOS7PnrGJWmtnpFhFFz
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

def generate_exponential(n):
  u1 = np.random.uniform(0,1,n)
  u2 = np.random.uniform(0,1,n)
  u3 = np.random.uniform(0,1,n)
  u4 = np.random.uniform(0,1,n)
  r1 = np.sqrt(-2*np.log(u1))
  r2 = np.sqrt(-2*np.log(u3))
  theta1 = 2*np.pi*u2
  theta2 = 2*np.pi*u4
  x = r1*np.cos(theta1)
  y = r2*np.sin(theta2)
  result = (x**2)+(y**2)
  return result
result = generate_exponential(1000)
real = np.random.exponential(scale=2, size=1000) #brenchmark

#line plot to compare with brenchmark
plt.figure(figsize=(10,10))
plt.plot(result, label = 'Polar Method', alpha = 0.5)
plt.plot(real, label="Python", alpha=0.5)
plt.legend(fancybox=True, framealpha = 0.5)
plt.savefig('compare.png', transparent=True)

#density plot compare with brenchmark
plt.figure(figsize=(10,10))
plt.hist(result, edgecolor='black', bins=int(180/5), alpha=0.3, density=True, label = 'Polar Coordinate')
plt.hist(real, edgecolor='black', bins=int(180/5), alpha=0.3, density=True, label = 'Python')
plt.legend(fancybox=True, framealpha=0.5)
plt.savefig("density.png", transparent=True)

print(stats.kstest(real, 'expon', args=(0,2))) #KStest